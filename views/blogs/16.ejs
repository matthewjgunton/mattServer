<!DOCTYPE html>
<html>

<head>
  <% include ../partials/header.ejs%>
  <link href = "/css/common.css" rel = "stylesheet" />
  <link href = "/css/project/common.css" rel = "stylesheet" />
  <link href = "/css/start.css" rel="stylesheet" />
  <link href = "/css/icons.css" rel="stylesheet" />
  <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
</head>

<body>
  <% include ../partials/navbar %>

  <h1>A High Level Introduction to Web Sockets</h1>
  <h4>October 14th, 2020</h4>

  <center><img src = "/images/code.jpg" /></center>

  <div id = "mid">
    <p>
      If you are building a messaging application, or any web app that requires more constant communication between the server and the clients, then you may have run into an issue: your POST and GET requests aren’t happening fast enough. If your app wants to see if a user has left the page or is still browsing, HTTP requests may not be working. To account for this, developers use web sockets. In this post, I’ll give you a high level view of why you would use sockets.
<br/><br/>
      Beginning with the theory, sockets are similar to HTTP requests in that they are a way for the client to interact with your server. The big distinction is that once setup, socket connections are maintained until disconnected. By comparison, HTTP requests are not maintained and so every request has a lot of overhead that slows it down. Socket’s continued connection is wonderful because it can give the server insight into the user. If you want the server to take the user’s data out of cache when the user logs off, web sockets are a reliable way to know when the user leaves the tab. Moreover, if you are building a messaging app, sockets are great for sending small messages repeatedly. Beyond just request/response, sockets can send messages to all users connected. One instance of this is keeping users aware of small changes, such as a person typing in a group chat. In short, sockets are fantastic when you want a user experience that adapts to other user’s behavior in real time.
<br/><br/>
      Nevertheless, sockets are not replacing HTTP requests. One big downside to socket usage is the resource consumption on the server. Maintaining all the socket connections is taxing and can make it much more expensive to scale your application. Because of the issue with cost, the general advice is to build your web application using HTTP requests and then when you see that you need greater connectivity or longer lived connections switch over some functionality to sockets.
<br/><br/>
      Onwards & Upwards
    </p>
  </div>

    <% include ../partials/footer.ejs%>


</body>
