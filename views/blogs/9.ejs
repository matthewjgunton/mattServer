<!DOCTYPE html>
<html>

<head>
  <% include ../partials/header.ejs%>
  <link href = "/css/common.css" rel = "stylesheet" />
  <link href = "/css/landing.css" rel ='stylesheet' />
  <link href = "/css/start.css" rel="stylesheet" />
  <link href = "/css/icons.css" rel="stylesheet" />
  <link href = "/css/blog/specific.css" rel = "stylesheet" />
  <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
</head>

<body>
  <% include ../partials/navbar %>

  <h1>Lazy Evaluation in CS and Life</h1>
  <h4>February 17th, 2020</h4>

  <center><img src = "/images/visaplaid.jpg" /></center>

  <div class = "text">
    <p>
      Reading Shakespeare, I always think to myself that humans have behaved the same throughout time. The real difference being what technology they interact with while they’re alive. Living in the age of the computer, I consistently find that computer science ideas easily draw parallels to human thought. One specific connection I’ve been pondering is the sequence of our thoughts.
      <br/><br/>
      In Computer Science there are two ways of turning high level (think human-readable) code into low-level code that runs directly on the hardware. The first is the most straight-forward. Whenever a programmer wants a calculation, the result is computed immediately. This process, called strict evaluation, makes intuitive sense, as it leads to an easily debugged system. Another way of seeing it, is doing all the work as soon as it becomes possible to. We all know Type A people who could be described as strict evaluators. As soon as a problem comes up, they devote all resources to solving it quickly. Normally these types of people are incredibly successful. This type of thinking really only has one flaw: incomplete information.
      <br/><br/>
      In programming, if a result needs more information before it can be solved, an error is sent to the programmer. These are relatively small errors in programming usually, because they can be trivially dealt with by moving around other calculations. Nonetheless, in human thought a lot of perfect information doesn’t produce an error. Not having perfect information is a fact of life. If people threw errors whenever they didn’t have enough information to make a decision, no one would ever leave their beds! So robotic people are a long way away, why bother drawing the comparison between evaluation types and thought sequence?
      <br/><br/>
      In some programming languages, there is a notion called lazy evaluation. While its implementation is extremely technical, its logical base is easy to understand. When using lazy evaluation, the computer won’t compute a result until it is needed by some other calculation. Why is that revolutionary? It often means the original result doesn’t have to be completely calculated. In computers, if you are working with an infinite list, a strict evaluator will crash immediately. With lazy evaluations, you can work with the concept of infinity and still get a result. In other words, what lazy evaluation enables is greater context.
      <br/><br/>
      Greater context means you have a better understanding of how your decision will affect the world around you. While it will never be perfect––you’ll waste your life waiting for the absolute perfect context to act–– you can make the odds better sometimes. You don’t have to be an avid student of History to find examples of rushed decisions. People who don’t wait long enough to get enough information. For instance, Romeo and Juliet would not have been a tragedy had the two of them not made such rash decisions at the end. The takeaway from lazy evaluation isn’t that we should all become procrastinators, but rather that the best time to decide isn’t always in the moment. In a world that prioritizes quick thinking and instant feedback, it can feel like time is always against us. However, as lazy evaluation shows, if you always rush to get the immediate result, you may end up doing more work than necessary, and you may make a decision that given more time, you would have avoided. Don’t be like Romeo. Take your time.
      <br/><br/>
      Onwards & Upwards
    </p>
  </div>

    <% include ../partials/footer.ejs%>


</body>
